{
  "hash": "a51667579d8905318f9e59da434688ef",
  "result": {
    "markdown": "---\ntitle: \"Replace missing value from other columns using coalesce join in dplyr\"\nauthor:\n  - name: Aster Hu\n    affiliation: Enterprise Data Governance Office<br>TD Bank\n    email: vickersa@mskcc.org\n    url: https://decisioncurveanalysis.org\ndate: 2023-03-18\ncategories: [na-value, data-cleaning, dplyr, 2023]\ndescription: \"An elegant way to replace NA value\"\nformat: \n  html:\n    code-fold: false\n---\n\n\n## Coalesce function in dplyr\n\nWhen cleaning and aggregating data using dplyr package in R, `coalesce()` is extremely handy to replace the NA value with values from other columns.\n\n### A simple example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\ndf1 <- tibble(\n  name  = c('Amy', 'Bella', 'Charlie', 'Debbie'),\n  state = c(NA, 'Florida', NA, 'Florida')\n)\n\ndf2 <- tibble(\n  name  = c('Bella', 'Charlie', 'Debbie', 'Emily'),\n  state = c(NA, 'Michigan', 'Michigan', 'Michigan')\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  name    state  \n  <chr>   <chr>  \n1 Amy     <NA>   \n2 Bella   Florida\n3 Charlie <NA>   \n4 Debbie  Florida\n```\n:::\n\n```{.r .cell-code}\ndf2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  name    state   \n  <chr>   <chr>   \n1 Bella   <NA>    \n2 Charlie Michigan\n3 Debbie  Michigan\n4 Emily   Michigan\n```\n:::\n:::\n\n\nresult:\n\n```r         \n> df1\n# A tibble: 4 × 2\n  name    state  \n  <chr>   <chr>  \n1 Amy     NA     \n2 Bella   Florida\n3 Charlie NA     \n4 Debbie  Florida\n\n> df2\n# A tibble: 4 × 2\n  name    state   \n  <chr>   <chr>   \n1 Bella   NA      \n2 Charlie Michigan\n3 Debbie  Michigan\n4 Emily   Michigan\n```\n\n```r         \n# The usual dplyr way to coalesce\nfull_join(df1, df2, by = \"name\") %>% \n  mutate(\n    state = coalesce(state.x, state.y),\n    .keep = \"unused\"\n  )\n```\n```\n# A tibble: 5 × 2\n  name    state   \n  <chr>   <chr>   \n1 Amy     NA      \n2 Bella   Florida \n3 Charlie Michigan\n4 Debbie  Florida \n5 Emily   Michigan\n```\n\n### Elaborated usage of coalesce\n\n```r\n# A more complicated example\n\ndf1 <- tibble(\n  name  = c('Amy', 'Bella', 'Charlie', 'Debbie'),\n  state = c(NA, 'Florida', NA, 'Florida'),\n  response = c(NA, NA, 'Yes', NA)\n)\n\ndf2 <- tibble(\n  name  = c('Bella', 'Charlie', 'Debbie', 'Emily'),\n  state = c(NA, 'Michigakkkkkn', 'Michigan', 'Michigan'),\n  response = c('Yes', NA, 'Yes', NA)\n)\n```\n\n\n```r\n> df1\n# A tibble: 4 × 3\n  name    state   response\n  <chr>   <chr>   <chr>   \n1 Amy     NA      NA      \n2 Bella   Florida NA      \n3 Charlie NA      Yes     \n4 Debbie  Florida NA  \n\n> df2\n# A tibble: 4 × 3\n  name    state    response\n  <chr>   <chr>    <chr>   \n1 Bella   NA       Yes     \n2 Charlie Michigan NA      \n3 Debbie  Michigan Yes     \n4 Emily   Michigan NA \n```\n\n\n\n```r\n# Coalesce becomes more redundant when multiple columns are involved\nfull_join(df1, df2, by = \"name\") %>% \n  mutate(\n    state = coalesce(state.x, state.y),\n    response = coalesce(response.x, response.y),\n    .keep = \"unused\"\n  )  \n```\n\n```r\n# A tibble: 5 × 3\n  name    state    response\n  <chr>   <chr>    <chr>   \n1 Amy     NA       NA      \n2 Bella   Florida  Yes     \n3 Charlie Michigan Yes     \n4 Debbie  Florida  Yes     \n5 Emily   Michigan NA\n```\n\n\n\n## Reference\n\n-   [Coalescing joins in dplyr](https://alistaire.rbind.io/blog/coalescing-joins/)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}